const { bot, adminState, subadminMenu } = require('./utils');
const User = require('../models/userDB');
const Task = require('../models/taskDB');

const {
  awaitingTaskDescription,
  awaitingTaskPhoto,
  awaitingDeadlineDate,
  awaitingManualDateInput,
  awaitingDeadlineTime,
  awaitingManualTimeInput
} = require('./deadlineHandler');
const { notifySubadminOnTaskCompletion } = require('./notifications'); 


async function handleSubadminCommands(msg, text, username) {
  const chatId = msg.chat.id;
  const user = await User.findOne({ username });

  if (!user || user.role !== 'subadmin') return;

  const department = user.department;

  if (text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
    delete adminState[username];
    return bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–±–∞–¥–º–∏–Ω–∞:', subadminMenu);
  }

  if (text === 'üë• –ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏') {
    try {
      // –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'user' –≤ –æ—Ç–¥–µ–ª–µ
      const users = await User.find({ department, role: 'user' });

      if (!users.length) {
        return bot.sendMessage(chatId, `–í –æ—Ç–¥–µ–ª–µ "${department}" –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.`, subadminMenu);
      }

      const list = users.map(u => `@${u.username}`).join('\n');
      return bot.sendMessage(chatId, `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ "${department}":\n\n${list}`, subadminMenu);

    } catch (err) {
      return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', subadminMenu);
    }
  }

  if (text === 'üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') {
    adminState[username] = {
      step: 'awaitingTargetAudience',
      department: department,
      role: 'subadmin'
    };
    return bot.sendMessage(chatId, '–ö–æ–º—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?', {
      reply_markup: {
        keyboard: [['üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞'], ['üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'], ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
        resize_keyboard: true
      }
    });
  }

  if (adminState[username]) {
    const state = adminState[username];

    switch (state.step) {
      case 'awaitingTargetAudience':
        if (text === 'üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞') {
          state.target = 'all';
          state.step = 'awaitingTaskTitle';
          return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
        }

        if (text === 'üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é') {
          const users = await User.find({ department });
          if (!users.length) return bot.sendMessage(chatId, '–í –≤–∞—à–µ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');

          state.target = 'user';
          state.step = 'awaitingTargetUsername';

          const buttons = users.map(u => [`@${u.username}`]);
          buttons.push(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']);
          return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            reply_markup: { keyboard: buttons, resize_keyboard: true }
          });
        }
        break;

      case 'awaitingTargetUsername':
        const selectedUser = await User.findOne({ username: text.slice(1) }); // –û–∂–∏–¥–∞–µ–º @username
        if (!selectedUser) {
          return bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ.', {
            reply_markup: { keyboard: [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard: true }
          });
        }

        state.targetUsername = selectedUser.username;
        state.step = 'awaitingTaskTitle';
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');

      case 'awaitingTaskTitle':
        state.title = text;
        state.step = 'awaitingTaskDescription';
        return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');

      case 'awaitingTaskDescription':
        await awaitingTaskDescription(bot, chatId, adminState, username, text);
        break;

      case 'awaitingTaskPhoto':
        await awaitingTaskPhoto(bot, chatId, adminState, username, text);
        break;

      case 'awaitingDeadlineDate':
        await awaitingDeadlineDate(bot, chatId, adminState, username, text);
        break;

      case 'awaitingManualDateInput':
        await awaitingManualDateInput(bot, chatId, adminState, username, text);
        break;

      case 'awaitingDeadlineTime':
        await awaitingDeadlineTime(msg, bot, chatId, adminState, username, text);
        break;

      case 'awaitingManualTimeInput':
        await awaitingManualTimeInput(msg, bot, chatId, adminState, username, text);
        break;
    }
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function completeTask(taskId) {
  const task = await Task.findById(taskId);
  if (!task) return;

  task.status = 'completed';
  await task.save();

  await notifySubadminOnTaskCompletion(task); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–±–∞–¥–º–∏–Ω–∞
}

module.exports = { handleSubadminCommands, completeTask };
