require('dotenv').config();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

const { notifyCreatorOnTaskCompletion } = require('./notifications'); 
const { bot, formatDateTimeRu, User, Task } = require('./utils');
const { adminIds } = require('../constants/constants');


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTasksMessage(chatId, tasks) {
  const tasksText = tasks.map((task, index) => `${index + 1}. ${task.title}`).join('\n');
  const inlineKeyboard = tasks.map((task) => ({
    text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${task.title}`,
    callback_data: `view_task_${task._id}`
  }));

  const message = await bot.sendMessage(chatId, `–í–∞—à–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n${tasksText}`, {
    reply_markup: { inline_keyboard: inlineKeyboard.map(button => [button]) }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º messageId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  tasks.forEach(async (task) => {
    await Task.findByIdAndUpdate(task._id, { messageId: message.message_id });
  });
}

 // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
async function handleViewTask(chatId, messageId, taskId) {
  try {
    const task = await Task.findById(taskId);
    if (task) {
      const department = task.department || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      const deadline = task.deadline ? new Date(task.deadline) : null;

      const formattedDeadline = deadline 
        ? `${deadline.toLocaleDateString('ru-RU')} ${deadline.toLocaleTimeString('ru-RU')}` 
        : '–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞';

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥–ª–∞–π–Ω–µ –≤ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      const taskText = `üìù *–ó–∞–¥–∞—á–∞:* ${task.title}\nüìå *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\nüè¢ *–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:* ${department}\nüìÖ *–î–µ–¥–ª–∞–π–Ω:* ${formattedDeadline}\n\n‚úÖ –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`;

      const inlineKeyboard = [
        [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `complete_task_${taskId}` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_tasks` }]
      ];

      if (task.photo) {
        await bot.deleteMessage(chatId, messageId).catch((err) => {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
        });

        await bot.sendPhoto(chatId, task.photo, {
          caption: taskText,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      } else {
        await bot.editMessageText(taskText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      }
    } else {
      await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:", error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function handleCompleteTask(chatId, taskId, callbackQuery) {
  try {
    const task = await Task.findById(taskId);
    if (!task) {
      console.log(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const username = callbackQuery.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    if (!username || username === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
    }

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–Ω–µ–µ
    if (!task.completedBy) {
      task.completedBy = [];
    }

    if (!task.completedBy.includes(username)) {
      task.completedBy.push(username); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—á—É
    const allUsers = await User.find({ department: task.department }); // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–¥–µ–ª–∞
    const allCompleted = allUsers.every(user => task.completedBy.includes(user.username)); 

    if (allCompleted) {
      task.isCompleted = true; // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏, –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      task.completedAt = new Date(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }

    await task.save();

    console.log(`–ó–∞–¥–∞—á–∞ "${task.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username}`);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    await notifyCreatorOnTaskCompletion(task);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    if (task.messageId) {
      await bot.deleteMessage(chatId, task.messageId).catch((err) => {
        console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π:', err.message);
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ userId: chatId });
    if (user) {
      const userTasks = await Task.find({ assignedTo: user.username, isCompleted: false });
      if (userTasks.length > 0) {
        await sendTasksMessage(chatId, userTasks);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
} 

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const callbackData = callbackQuery.data;
  const username = callbackQuery.from.username;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (callbackData.startsWith('complete_task_')) {
      const taskId = callbackData.split('_')[2]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏
      await handleExecuteTask(chatId, taskId, callbackQuery); // –ü–µ—Ä–µ–¥–∞–µ–º callbackQuery –≤ —Ñ—É–Ω–∫—Ü–∏—é
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
    if (callbackData.startsWith('view_task_')) {
      const taskId = callbackData.split('_')[2];
      await handleViewTask(chatId, callbackQuery.message.message_id, taskId);
    }

 const pendingPhotoUploads = {};

 if (callbackData.startsWith('attach_photo_')) {
  const taskId = callbackData.split('_')[2];
  pendingPhotoUploads[chatId] = { taskId, username: callbackQuery.from.username };

  await bot.sendMessage(chatId, 'üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞—á–∏.');
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –≤–Ω–∏–∑—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ
  const pending = pendingPhotoUploads[chatId];
  if (!pending) return;

  // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
  if (!msg.photo) {
    return bot.sendMessage(chatId, '‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
  }

  const { taskId, username } = pending;
  delete pendingPhotoUploads[chatId]; // –£–¥–∞–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ

  try {
    const task = await Task.findById(taskId);
    if (!task) {
      return bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const photo = msg.photo[msg.photo.length - 1].file_id;
    task.photo = photo;

    if (!Array.isArray(task.assignedTo)) {
      task.assignedTo = [];
    }

    if (!task.completedBy.includes(username)) {
      task.completedBy.push(username);
    }

    const allCompleted = task.assignedTo.every(user => task.completedBy.includes(user));
    if (allCompleted) {
      task.isCompleted = true;
      task.completedAt = new Date();
    }

    await task.save();

    await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ.`);
    await notifyCreatorOnTaskCompletion(task);

    if (task.messageId) {
      await bot.deleteMessage(chatId, task.messageId).catch(err => {
        console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π:', err.message);
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å —Ñ–æ—Ç–æ:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
});

 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–æ—Ç–æ
if (callbackData.startsWith('skip_task_')) {
  const taskId = callbackData.split('_')[2]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏
  const task = await Task.findById(taskId);

  if (task) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (task.isCompleted) {
      return bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ "${task.title}" —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    }

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ assignedTo ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (!Array.isArray(task.assignedTo)) {
      task.assignedTo = [];
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É —Ä–∞–Ω–µ–µ
    if (!task.completedBy.includes(callbackQuery.from.username)) {
      task.completedBy.push(callbackQuery.from.username); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—á—É
    const allCompleted = task.assignedTo.every(user => task.completedBy.includes(user));

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á—É, —Ç–æ –ø–æ–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
    if (allCompleted) {
      task.isCompleted = true;
      task.completedAt = new Date(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }

    await task.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ.`);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
    await handleCompleteTask(chatId, taskId, callbackQuery);  
  } else {
    return bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
  }
}

 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
 if (callbackData === 'back_to_tasks') {
  const user = await User.findOne({ username: username });

  if (user) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userTasks = await Task.find({ 
      assignedTo: username, // –ó–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      isCompleted: false 
    });

    if (userTasks.length > 0) {
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
      await sendTasksMessage(chatId, userTasks);
    } else {
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
    }
  } else {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    await bot.sendMessage(chatId, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
  }
}

} catch (error) {
console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
}
});

 // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"
async function handleUserCommands(msg, text, username) {
  const chatId = msg.chat.id;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"
  if (text === 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏' && !adminIds.includes(msg.from.id)) {
    try {
      const user = await User.findOne({ username: username });
      if (!user) {
        return bot.sendMessage(chatId, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      }

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –µ–≥–æ –∑–∞–¥–∞—á–∏...`);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
      const userTasks = await Task.find({
        assignedTo: username,
        isCompleted: false,
        $or: [{ status: { $ne: 'overdue' } }] // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      });

      if (userTasks.length > 0) {
        await sendTasksMessage(chatId, userTasks);
      } else {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìã –ú–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
  if (text === 'üìã –ú–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏') {
    try {
      const user = await User.findOne({ username: username });
      if (!user) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      }

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

      // –ò—â–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const tasks = await Task.find({
        assignedTo: user.username,
        isCompleted: false,
        createdAt: { $gte: oneDayAgo }  // –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
      });

      if (tasks.length === 0) {
        return bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.');
      }

      let taskList = 'üìã *–ú–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞ —Å—É—Ç–∫–∏):*\n';
      tasks.forEach(task => {
        const deadlineStr = formatDateTimeRu(new Date(task.deadline));
        taskList += `- ${task.title} (üïí ${deadlineStr})\n`;
      });
      await bot.sendMessage(chatId, taskList, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìÇ –ó–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞"
  if (text === 'üìÇ –ó–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞' && !adminIds.includes(msg.from.id)) {
    try {
      const user = await User.findOne({ username: username });
      if (!user) {
        return bot.sendMessage(chatId, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      }

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞ (${user.department})`);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const departmentTasks = await Task.find({
        department: user.department,  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª—É
        isCompleted: false,           // –¢–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        assignedTo: { $nin: [user.username] },  // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        status: { $ne: 'overdue' },   // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $or: [
          { assignedTo: { $exists: false } },  // –ó–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
          { assignedTo: null }  // –ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∏–∫–æ–º—É
        ]
      });

      if (departmentTasks.length > 0) {
        await sendTasksMessage(chatId, departmentTasks);
      } else {
        await bot.sendMessage(chatId, '–í –≤–∞—à–µ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –æ—Ç–¥–µ–ª–∞:", error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìÇ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞"
  if (text === 'üìÇ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞') {
    try {
      const user = await User.findOne({ username: username });
      if (!user) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      }

      const department = user.department;
      if (!department) {
        return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª.');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

      // –ò—â–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const tasks = await Task.find({
        department,
        isCompleted: false,
        createdAt: { $gte: oneDayAgo }, // –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        assignedTo: { $ne: user.username }, // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $or: [
          { assignedTo: { $in: [null] } },     // –ó–∞–¥–∞—á–∏, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∏–∫–æ–º—É
          { assignedTo: { $exists: false } }    // –ó–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        ]
      });

      if (tasks.length === 0) {
        return bot.sendMessage(chatId, 'üìÇ –í –≤–∞—à–µ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç _–≥—Ä—É–ø–ø–æ–≤—ã—Ö_ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.');
      }

      let taskList = 'üìÇ *–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞ (–∑–∞ —Å—É—Ç–∫–∏):*\n';
      tasks.forEach(task => {
        const deadlineStr = formatDateTimeRu(new Date(task.deadline));
        taskList += `- ${task.title} (üïí ${deadlineStr})\n`;
      });
      await bot.sendMessage(chatId, taskList, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç–¥–µ–ª–∞:", error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
async function handleExecuteTask(chatId, taskId, callbackQuery) {
  try {
    const task = await Task.findById(taskId);
    if (!task) {
      return bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const username = callbackQuery.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    const taskText = `üìù *–ó–∞–¥–∞—á–∞:* ${task.title}\nüìå *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n\n‚ùì –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π?`;

    const inlineKeyboard = [
      [{ text: 'üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `attach_photo_${taskId}` }],
      [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_task_${taskId}` }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_tasks` }]
    ];

    await bot.sendMessage(chatId, taskText, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: inlineKeyboard }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

module.exports = { handleUserCommands };