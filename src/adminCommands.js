const { adminState, bot, isValidUsername, escapeHTML, getKeyboard, departmentList, adminMainMenu, Document, User, Task } = require('./utils');
const { adminIds } = require('../constants/constants');
 
const {
  awaitingTaskDescription,
  awaitingTaskPhoto,
  awaitingDeadlineDate,
  awaitingManualDateInput,
  awaitingDeadlineTime,
  awaitingManualTimeInput,
} = require('./deadlineHandler');

const {
  handleUserCommands
} = require('./userCommands');  
const { handleAddUserFlow } = require('./addUserFlow');


async function handleAdminCommands(msg, text, username, adminIds) {
  const chatId = msg.chat.id;

   if (text === 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
  try {
    const users = await User.find({});
    if (users.length === 0) return bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');

    const sortedUsers = users.sort((a, b) => {
      const roleOrder = { admin: 0, subadmin: 1, user: 2 };
      return roleOrder[a.role] - roleOrder[b.role];
    });

    const userList = users.map(user => {
      const username = `@${user.username}`;
      
      if (user.role === 'admin') {
        return `${username} ‚Äî –ê–¥–º–∏–Ω`;
      }
      
      if (user.role === 'subadmin') {
        // –ï—Å–ª–∏ —É —Å—É–±–∞–¥–º–∏–Ω–∞ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
        const departments = user.subadminDepartments.length > 0 
          ? user.subadminDepartments.join(', ') 
          : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';  // –ï—Å–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        return `${username} ‚Äî –°—É–±–∞–¥–º–∏–Ω ${departments}`;
      }

      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      return `${username} ‚Äî ${user.department || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}`;
    }).join('\n');

    return bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${userList}`, adminMainMenu);
  } catch (error) {
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

    if (text === 'üì• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
      adminState[username] = { step: 'awaitingUsername' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username).');
    }

    if (adminState[username]) {
      const result = await handleAddUserFlow(bot, msg, adminState);

      if (result?.success) {
        await bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', adminMainMenu); 
      }
    }

    if (text === '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
      adminState[username] = { step: 'awaitingDeleteUsername' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username).');
    }
    if (text === 'üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') {
    if (!adminState[username]) {
      adminState[username] = {
        step: 'awaitingTarget',
        role: 'admin'
      };
    } else {
      adminState[username].step = 'awaitingTarget';
    }

   return bot.sendMessage(chatId, '–ö–æ–º—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
      buttonsRows: [['üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é', 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É']],
      includeHome: true
    }));
  }
  

  // üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
    if (adminState[username]?.step === 'awaitingTarget' && text === 'üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é') {
    adminState[username].step = 'awaitingDepartment';

     return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', getKeyboard({
    buttonsRows: departmentList.map(d => [`${d.emoji} ${d.name}`]),
    includeBack: true,
    includeHome: true
  }));
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ –æ—Ç–¥–µ–ª–∞
if (adminState[username]?.step === 'awaitingDepartment' && text === 'üîô –ù–∞–∑–∞–¥') {
  adminState[username].step = 'awaitingTarget';

  return bot.sendMessage(chatId, '–ö–æ–º—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
    buttonsRows: [['üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é', 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É']],
    includeHome: true
  }));
}

// üßç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
if (adminState[username]?.step === 'awaitingTarget') {
  if (text === 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É') {
    const currentId = msg.from.id.toString();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
    const otherAdmins = await User.find({
      role: 'admin',
      telegramId: { $ne: currentId }
    });

    if (!otherAdmins.length) {
      return bot.sendMessage(chatId, '–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    }

    adminState[username].step = 'awaitingAdmin';

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', getKeyboard({
      buttonsRows: otherAdmins.map(admin => [`@${admin.username}`]),
      includeBack: true,
      includeHome: true
    }));
  }
}
 // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (adminState[username]?.step === 'awaitingAdmin' && text === 'üîô –ù–∞–∑–∞–¥') {
  adminState[username].step = 'awaitingTarget';

  return bot.sendMessage(chatId, '–ö–æ–º—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
    buttonsRows: [['üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é', 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É']],
    includeHome: true
  }));
}
if (adminState[username]?.step === 'awaitingAdmin') {
    const targetUsername = text.replace('@', '').trim();

  const targetAdmin = await User.findOne({
    username: targetUsername,
    role: 'admin'
  });

  if (!targetAdmin) {
    return bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ –∂–µ –ø–æ–ª—è, —á—Ç–æ –∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  adminState[username].target = 'admin';
  adminState[username].targetUsername = targetAdmin.username;
  adminState[username].targetTelegramId = targetAdmin.telegramId;
  adminState[username].step = 'awaitingTaskTitle';

  return bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @${targetAdmin.username}:`);
}
    if (text === 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–±–∞–¥–º–∏–Ω–∞') {
      adminState[username] = { step: 'awaitingSubadminUsername' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–±–∞–¥–º–∏–Ω–æ–º (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username).');
    }

    if (adminState[username]?.step === 'awaitingSubadminUsername') {
      const subadminUsername = text.replace('@', '').trim();
      const userToAssign = await User.findOne({ username: subadminUsername });

      if (!userToAssign) {
        return bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∂–µ –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.');
      }

      adminState[username] = {
        step: 'choosingDepartments',
        subadminUsername: subadminUsername,
        selectedDepartments: []
      };

      return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –æ—Ç–¥–µ–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å @${subadminUsername}`, {
        reply_markup: {
          keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['‚úÖ –ì–æ—Ç–æ–≤–æ', '‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      });
    }

    if (adminState[username]?.step === 'choosingDepartments') {
      const state = adminState[username];

      if (text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
        if (state.selectedDepartments.length === 0) {
          return bot.sendMessage(chatId, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞.');
        }

        const userToUpdate = await User.findOne({ username: state.subadminUsername });
        userToUpdate.role = 'subadmin';
        userToUpdate.subadminDepartments = state.selectedDepartments;
        await userToUpdate.save();

        delete adminState[username];
        return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userToUpdate.username} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—É–±–∞–¥–º–∏–Ω–æ–º –≤ –æ—Ç–¥–µ–ª–∞—Ö: ${state.selectedDepartments.join(', ')}`, adminMainMenu);
      }

      if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
        delete adminState[username];
        return bot.sendMessage(chatId, '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–±–∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', adminMainMenu);
      }

      const selected = departmentList.find(d => `${d.emoji} ${d.name}` === text);
      if (!selected) return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–¥–µ–ª.');

      const name = selected.name;
      const alreadySelected = state.selectedDepartments.includes(name);

      if (alreadySelected) {
        state.selectedDepartments = state.selectedDepartments.filter(d => d !== name);
      } else {
        if (state.selectedDepartments.length >= 5) {
          return bot.sendMessage(chatId, '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –æ—Ç–¥–µ–ª–æ–≤.');
        }
        state.selectedDepartments.push(name);
      }

      return bot.sendMessage(chatId, `–í—ã–±—Ä–∞–Ω—ã –æ—Ç–¥–µ–ª—ã: ${state.selectedDepartments.join(', ') || '–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ'}.\n–ù–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ.`, {
        reply_markup: {
          keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['‚úÖ –ì–æ—Ç–æ–≤–æ', '‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      });
    }

    if (text === 'üßπ –£–¥–∞–ª–∏—Ç—å —Å—É–±–∞–¥–º–∏–Ω–∞') {
      adminState[username] = { step: 'awaitingRemoveSubadminUsername' };
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username —Å—É–±–∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @username).');
    }

    if (adminState[username]?.step === 'awaitingRemoveSubadminUsername') {
      const subadminUsername = text.replace('@', '').trim();
      const userToRemove = await User.findOne({ username: subadminUsername });

      if (!userToRemove) {
        return bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∂–µ –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.');
      }

      if (userToRemove.role !== 'subadmin') {
        return bot.sendMessage(chatId, '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–±–∞–¥–º–∏–Ω–æ–º.');
      }

      userToRemove.role = 'user';  // –∏–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—É–±–∞–¥–º–∏–Ω–∞
      userToRemove.subadminDepartments = [];  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π

      await userToRemove.save();

      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
      delete adminState[username];

      return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${subadminUsername} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–±–∞–¥–º–∏–Ω–æ–º. –ï–≥–æ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.`, adminMainMenu);
    }

   if (text === 'üìó –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' || text === 'üìò –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏') {
  const isCompleted = text.includes('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ');
  adminState[username] = {
    step: isCompleted ? 'awaitingDepartmentForCompletedTasks' : 'awaitingDepartmentForUncompletedTasks',
    isCompleted,
    mode: 'tasks'
  };

  return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ${isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö' : '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö'} –∑–∞–¥–∞—á:`, {
    reply_markup: {
      keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['üßë‚Äçüíº –ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
      resize_keyboard: true
    }
  });
}

// üîπ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á') {
  adminState[username] = {
    step: 'awaitingDepartmentForStats',
    mode: 'stats'
  };

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
    reply_markup: {
      keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['üßë‚Äçüíº –ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
      resize_keyboard: true
    }
  });
}

if (adminState[username]?.mode === 'tasks' && adminState[username]?.step?.startsWith('awaitingDepartmentFor')) {
  const mode = adminState[username].mode;
  const isCompleted = adminState[username].isCompleted;

  if (mode !== 'tasks') {
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.', adminMainMenu);
  }

  if (text === 'üßë‚Äçüíº –ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º') {
    const admins = await User.find({ role: 'admin' });
    const adminUsernames = admins.map(admin => `@${admin.username}`);
    adminState[username] = {
      step: isCompleted ? 'awaitingAdminForCompletedTasks' : 'awaitingAdminForUncompletedTasks',
      isCompleted,
      mode: 'tasks'    };

    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
      reply_markup: {
        keyboard: chunk(adminUsernames, 2).concat([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]),
        resize_keyboard: true
      }
    });
  }

  const selectedDepartment = departmentList.find(d => `${d.emoji} ${d.name}` === text);
  if (!selectedDepartment) return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');

  adminState[username].department = selectedDepartment.name;

  try {
    const tasks = await Task.find({
      department: selectedDepartment.name,
      isCompleted
    }).sort({ [isCompleted ? 'completedAt' : 'createdAt']: -1 });

    if (tasks.length === 0) {
      adminState[username] = null;
      return bot.sendMessage(chatId, `–í —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç ${isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö' : '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö'} –∑–∞–¥–∞—á ‚úÖ`, adminMainMenu);
    }

    // ‚è≥ –ê–Ω–∏–º–∞—Ü–∏—è
    const loadingSteps = ['‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á', '‚è≥‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á', '‚è≥‚è≥‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á'];
    let loadingMessage = await bot.sendMessage(chatId, loadingSteps[0], { disable_notification: true });
    for (let i = 1; i < loadingSteps.length; i++) {
      await new Promise(r => setTimeout(r, 500));
      await bot.editMessageText(loadingSteps[i], {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      }).catch(() => {});
    }
    await new Promise(r => setTimeout(r, 300));
    await bot.deleteMessage(chatId, loadingMessage.message_id).catch(() => {});

    const maxMessageLength = 4000;
    let currentPart = '';
    const parts = [];

    for (const task of tasks) {
      const deadline = new Date(task.deadline).toLocaleString('ru-RU');
      const completedAt = task.completedAt ? new Date(task.completedAt).toLocaleString('ru-RU') : '‚Äî';

      let taskText = `${isCompleted ? '‚úÖ' : 'üîπ'} <b>${escapeHTML(task.title)}</b>\n`;
      taskText += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeHTML(task.description) || '‚Äî'}\n`;
      taskText += `üè¢ –û—Ç–¥–µ–ª: ${escapeHTML(task.department)}\n`;
      taskText += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${escapeHTML(deadline)}\n`;
      if (isCompleted) taskText += `üìÜ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${escapeHTML(completedAt)}\n`;
      taskText += task.assignedTo
        ? `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${escapeHTML(task.assignedTo)}\n`
        : `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ —É–∫–∞–∑–∞–Ω\n`;
      taskText += '\n';

      if (currentPart.length + taskText.length > maxMessageLength) {
        parts.push(currentPart);
        currentPart = taskText;
      } else {
        currentPart += taskText;
      }
    }

    if (currentPart) parts.push(currentPart);

    await bot.sendMessage(chatId, `${isCompleted ? 'üìó –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' : 'üìò –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'} –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª–µ "${selectedDepartment.name}":`, { parse_mode: 'HTML' });
    for (const part of parts) {
      await bot.sendMessage(chatId, part, { parse_mode: 'HTML' });
    }

    adminState[username] = null;
    return bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', adminMainMenu);

  } catch (error) {
    console.error(error);
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

if (adminState[username]?.mode === 'tasks' && adminState[username]?.step?.startsWith('awaitingAdminFor')) {
  const isCompleted = adminState[username].isCompleted;
  const targetUsername = text.replace('@', '').trim();

  const targetAdmin = await User.findOne({
    username: targetUsername,
    role: 'admin'
  });

  if (!targetAdmin) {
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  try {
    const tasks = await Task.find({
      assignedTo: targetAdmin.username,
      isCompleted
    }).sort({ [isCompleted ? 'completedAt' : 'createdAt']: -1 });

    if (tasks.length === 0) {
      adminState[username] = null;
      return bot.sendMessage(chatId, `–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @${targetAdmin.username} –Ω–µ—Ç ${isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö' : '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö'} –∑–∞–¥–∞—á. üì≠`, adminMainMenu);
    }

    // ‚è≥ –ê–Ω–∏–º–∞—Ü–∏—è
    const loadingSteps = ['‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á', '‚è≥‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á', '‚è≥‚è≥‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á'];
    let loadingMessage = await bot.sendMessage(chatId, loadingSteps[0], { disable_notification: true });
    for (let i = 1; i < loadingSteps.length; i++) {
      await new Promise(r => setTimeout(r, 500));
      await bot.editMessageText(loadingSteps[i], {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      }).catch(() => {});
    }
    await new Promise(r => setTimeout(r, 300));
    await bot.deleteMessage(chatId, loadingMessage.message_id).catch(() => {});

    const maxMessageLength = 4000;
    let currentPart = '';
    const parts = [];

    for (const task of tasks) {
      const deadline = new Date(task.deadline).toLocaleString('ru-RU');
      const completedAt = task.completedAt ? new Date(task.completedAt).toLocaleString('ru-RU') : '‚Äî';

      let taskText = `${isCompleted ? '‚úÖ' : 'üîπ'} <b>${escapeHTML(task.title)}</b>\n`;
      taskText += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeHTML(task.description) || '‚Äî'}\n`;
      taskText += `üè¢ –û—Ç–¥–µ–ª: ${escapeHTML(task.department)}\n`;
      taskText += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${escapeHTML(deadline)}\n`;
      if (isCompleted) taskText += `üìÜ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${escapeHTML(completedAt)}\n`;
      taskText += task.assignedTo
        ? `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${escapeHTML(task.assignedTo)}\n`
        : `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ —É–∫–∞–∑–∞–Ω\n`;
      taskText += '\n';

      if (currentPart.length + taskText.length > maxMessageLength) {
        parts.push(currentPart);
        currentPart = taskText;
      } else {
        currentPart += taskText;
      }
    }

    if (currentPart) parts.push(currentPart);

    await bot.sendMessage(chatId, `${isCompleted ? 'üìó –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' : 'üìò –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'} –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @${targetAdmin.username}:`, { parse_mode: 'HTML' });
    for (const part of parts) {
      await bot.sendMessage(chatId, part, { parse_mode: 'HTML' });
    }

    adminState[username] = null;
    return bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', adminMainMenu);

  } catch (error) {
    console.error(error);
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function chunk(arr, size) {
  const res = [];
  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size));
  }
  return res;
}

// üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (adminState[username]?.mode === 'stats' && adminState[username]?.step === 'awaitingDepartmentForStats') {
  // –í—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (text === 'üßë‚Äçüíº –ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º') {
    const admins = await User.find({ role: 'admin' });
    const adminUsernames = admins.map(admin => `@${admin.username}`);

    adminState[username] = {
      step: 'awaitingAdminForStats',
      mode: 'stats'
    };

    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
      reply_markup: {
        keyboard: chunk(adminUsernames, 2).concat([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]),
        resize_keyboard: true
      }
    });
  }

  // –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
  const selectedDepartment = departmentList.find(d => `${d.emoji} ${d.name}` === text);
  if (selectedDepartment) {
    adminState[username] = null;

    try {
      const tasks = await Task.find({ department: selectedDepartment.name });

      if (!tasks.length) {
        return bot.sendMessage(chatId, `üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª–µ "${selectedDepartment.name}".`, adminMainMenu);
      }

      const userStats = {};

      for (const task of tasks) {
        const user = task.assignedTo;
        if (!user) continue;

        if (!userStats[user]) {
          userStats[user] = { done: 0, notDone: 0, total: 0 };
        }

        userStats[user].total += 1;

        const isDone = task.isCompleted === true || task.isCompleted === 'true';
        if (isDone) {
          userStats[user].done += 1;
        } else {
          userStats[user].notDone += 1;
        }
      }

      const users = Object.entries(userStats).filter(([_, stats]) => stats.total > 0);
      if (!users.length) {
        return bot.sendMessage(chatId, `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞—á–∞–º –≤ –æ—Ç–¥–µ–ª–µ "${selectedDepartment.name}".`, adminMainMenu);
      }

      let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É "${selectedDepartment.name}":\n\n`;

      for (const [user, stats] of users) {
        const { total, done, notDone } = stats;
        const donePercent = ((done / total) * 100).toFixed(1);
        const notDonePercent = ((notDone / total) * 100).toFixed(1);

        message += `üë§ @${user}:\n`;
        message += `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${total}\n`;
        message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${done} (${donePercent}%)\n`;
        message += `‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${notDone} (${notDonePercent}%)\n\n`;
      }

      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      return bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', adminMainMenu);
    } catch (err) {
      console.error(err);
      return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.');
}

// üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
if (adminState[username]?.mode === 'stats' && adminState[username]?.step === 'awaitingAdminForStats') {
  const selectedUsername = text.replace('@', '').trim();

  const admin = await User.findOne({ username: selectedUsername, role: 'admin' });
  if (!admin) {
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  try {
    const tasks = await Task.find({ assignedTo: selectedUsername });

    if (!tasks.length) {
      adminState[username] = null;
      return bot.sendMessage(chatId, `–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @${selectedUsername} –Ω–µ—Ç –∑–∞–¥–∞—á. üì≠`, adminMainMenu);
    }

    let done = 0, notDone = 0;
    for (const task of tasks) {
      Boolean(task.isCompleted) ? done++ : notDone++;
    }

    const total = done + notDone;
    const donePercent = ((done / total) * 100).toFixed(1);
    const notDonePercent = ((notDone / total) * 100).toFixed(1);

    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @${selectedUsername}:\n\n` +
                    `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${total}\n` +
                    `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${done} (${donePercent}%)\n` +
                    `‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${notDone} (${notDonePercent}%)`;

    adminState[username] = null;
    await bot.sendMessage(chatId, message);
    return bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', adminMainMenu);

  } catch (error) {
    console.error(error);
    adminState[username] = null;
    return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
if (text === 'üßπ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏') {
  adminState[username] = { step: 'awaitingDeleteTarget' };

  return bot.sendMessage(chatId, '–ö–æ–º—É —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏?', {
    reply_markup: {
      keyboard: [
        ['üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é', 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'],
        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
}

if (
  adminState[username]?.step === 'awaitingDeleteTarget' &&
  text === 'üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é'
) {
  adminState[username].step = 'awaitingDepartmentForDelete';

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', {
    reply_markup: {
      keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
      resize_keyboard: true
    }
  });
}

// –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
if (adminState[username] && adminState[username].step === 'awaitingDepartmentForDelete') {
  const selectedDepartment = departmentList.find(d => `${d.emoji} ${d.name}` === text);
  
  if (!selectedDepartment) {
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
  }

  adminState[username] = null; // –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ

  try {
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    const result = await Task.deleteMany({
      department: selectedDepartment.name,
      status: { $in: ['overdue', 'expired'] }
    });

    if (result.deletedCount === 0) {
      return bot.sendMessage(chatId, 'üßπ‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', adminMainMenu);
    }

    return bot.sendMessage(
      chatId,
      `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –æ—Ç–¥–µ–ª–∞ "${selectedDepartment.name}".`,
      adminMainMenu
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –æ—Ç–¥–µ–ª–∞:', error);
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', adminMainMenu);
  }
}

if (
  adminState[username]?.step === 'awaitingDeleteTarget' &&
  text === 'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const admins = await User.find({ role: 'admin' });

    if (!admins.length) {
      adminState[username] = null;
      return bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', adminMainMenu);
    }

    const usernames = admins.map(a => a.username);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–¥–∞—á–∏
    const tasksToDelete = await Task.find({
      assignedTo: { $in: usernames },
      status: { $in: ['overdue', 'expired', 'pending'] }
    });

    if (tasksToDelete.length === 0) {
      adminState[username] = null;
      return bot.sendMessage(chatId, '–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.', adminMainMenu);
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
    const result = await Task.deleteMany({
      assignedTo: { $in: usernames },
      status: { $in: ['overdue', 'expired', 'pending'] }
    });

    adminState[username] = null;

    return bot.sendMessage(
      chatId,
      `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.`,
      adminMainMenu
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
    adminState[username] = null;
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á.', adminMainMenu);
  }
}

    if (adminState[username]) {
      const state = adminState[username];

      switch (state.step) {
          case 'awaitingDeleteUsername':
          const delUsername = text.trim().replace('@', '');

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ username
          if (!isValidUsername(text)) {
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @halyna_sichova).');
          }

          if (!delUsername) return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @halyna_sichova).');

          try {
            const userToDelete = await User.findOne({ username: delUsername });
            if (!userToDelete) return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${delUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

            await User.deleteOne({ username: delUsername });
            delete adminState[username];
            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${delUsername} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
            return bot.sendMessage(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', adminMainMenu);
          } catch (error) {
            return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          }

          case 'awaitingDepartment':
          const selected = departmentList.find(d => `${d.emoji} ${d.name}` === text);
          if (!selected) return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');

          adminState[username] = { step: 'awaitingTargetAudience', department: selected.name };
          return bot.sendMessage(chatId, '–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
            buttonsRows: [
              ['üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞'],
              ['üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é']
            ],
            includeBack: true,
            includeHome: true
          }));

          case 'awaitingTargetAudience':
           if (text === 'üîô –ù–∞–∑–∞–¥') {
            adminState[username].step = 'awaitingDepartment';

              return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', getKeyboard({
              buttonsRows: departmentList.map(d => [`${d.emoji} ${d.name}`]),
              includeBack: true,
              includeHome: true
            }));
          }
          if (text === 'üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞') {
            const department = adminState[username]?.department;

            if (!department) {
              return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç.');
            }

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ, –ª–∏–±–æ —è–≤–ª—è—é—Ç—Å—è —Å—É–±–∞–¥–º–∏–Ω–∞–º–∏ —ç—Ç–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            const users = await User.find({
              $or: [
                { department: department },
                { subadminDepartments: department }
              ]
            });

            if (!users.length) {
              return bot.sendMessage(chatId, '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
            }

            adminState[username].target = 'all';
            adminState[username].step = 'awaitingTaskTitle';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', getKeyboard({
            buttonsRows: [], // –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            includeBack: true,
            includeHome: true
          }));
        }

          if (text === 'üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é') {
            const department = adminState[username]?.department;

            if (!department) {
              return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç.');
            }

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ, –ª–∏–±–æ —è–≤–ª—è—é—Ç—Å—è —Å—É–±–∞–¥–º–∏–Ω–∞–º–∏ —ç—Ç–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            const users = await User.find({
              $or: [
                { department: department },  // –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ
                { subadminDepartments: department }  // —Å—É–±–∞–¥–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
              ]
            });

            if (!users.length) {
              return bot.sendMessage(chatId, '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
            }

            adminState[username].target = 'user';
            adminState[username].step = 'awaitingTargetUsername';

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const buttons = users.map(u => [`@${u.username}`]);
            buttons.push(['üîô –ù–∞–∑–∞–¥' , 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']);

            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
              reply_markup: { keyboard: buttons, resize_keyboard: true }
            });
          }

          return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');

          case 'awaitingTargetUsername':
            if (text === 'üîô –ù–∞–∑–∞–¥') {
              adminState[username].step = 'awaitingTargetAudience';
              return bot.sendMessage(chatId, '–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
                buttonsRows: [
                  ['üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞'],
                  ['üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é']
                ],
                includeBack: true,
                includeHome: true
              }));
            } 
            const targetUsername = text.trim().replace('@', '');
            const exists = await User.findOne({ username: targetUsername });
            if (!exists) return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          
            adminState[username].targetUsername = targetUsername;
            adminState[username].step = 'awaitingTaskTitle';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
          
          case 'awaitingTaskTitle':
            if (text === 'üîô –ù–∞–∑–∞–¥') {
              adminState[username].step = 'awaitingTargetAudience';
              return bot.sendMessage(chatId, '–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?', getKeyboard({
                buttonsRows: [
                  ['üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞'],
                  ['üë§ –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é']
                ],
                includeBack: true,
                includeHome: true
              }));
            }
            adminState[username].title = text;
            adminState[username].step = 'awaitingTaskDescription';
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
      }
    }
     await handleUserCommands(msg, text, username);
  }
  
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const fileId = msg.photo[msg.photo.length - 1].file_id;

  const state = adminState[username];
  if (!state || state.step !== 'awaitingPhotoUpload') return;

  try {
    adminState[username].photo = fileId;
    adminState[username].step = 'awaitingDeadlineDate';

    const now = new Date();
    const dateOptions = [];

    for (let i = 0; i < 5; i++) {
      const date = new Date(now);
      date.setDate(now.getDate() + i);
      const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
      dateOptions.push([dateStr]);
    }

    dateOptions.push(['‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']);
    dateOptions.push(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']);

    return bot.sendMessage(chatId, 'üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:', {
      reply_markup: {
        keyboard: dateOptions,
        resize_keyboard: true
      }
    });

  } catch (error) {
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const userId = msg.from.id;
  const text = msg.text?.trim();
  const state = adminState[username];

  if (adminIds.includes(msg.from.id)) {
    if (text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      delete adminState[username];
      return bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', adminMainMenu);
    }
  }

  // --- –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å "üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã"
  if (text === 'üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã') {
    if (!adminIds.includes(userId)) {
      return bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');
    }
    
    if (adminState[username]?.step === 'awaitingDepartmentForDocuments') {
      return bot.sendMessage(chatId, '–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
    }

    adminState[username] = { step: 'awaitingDepartmentForDocuments' };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', {
      reply_markup: {
        keyboard: [
          ...departmentList.map(d => [`${d.emoji} ${d.name}`]),
          ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']  
        ],
        resize_keyboard: true
      }
    });
  }

  // --- –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  if (state?.step === 'awaitingDepartmentForDocuments') {
    if (!adminIds.includes(userId)) {
      return bot.sendMessage(chatId, '‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
    }
  
    const selectedDepartment = departmentList.find(d => `${d.emoji} ${d.name}` === text);
  
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    if (!selectedDepartment) {
      return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
    }
  
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    adminState[username] = { 
      ...state, 
      step: 'awaitingDocumentUpload',
      department: selectedDepartment.name
    };
    return bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${selectedDepartment.name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.`);
  }
  
  // --- –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  if (state?.step === 'awaitingDocumentUpload') {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (text) {
      return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç.');
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if (msg.document) {
      const fileId = msg.document.file_id;
      const fileName = msg.document.file_name;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ PDF
      if (!fileName.endsWith('.pdf')) {
        return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.');
      }

      const fileUrl = await bot.getFileLink(fileId);

      const department = adminState[username].department;

      try {
        const newDocument = new Document({
          department,
          fileName,
          fileUrl,
          uploadedBy: username,
        });

        await newDocument.save();

        const usersInDepartment = await User.find({ department });
        if (usersInDepartment.length === 0) {
          return bot.sendMessage(chatId, `‚ö†Ô∏è –í –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ ${department} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
        }
          // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
          for (const user of usersInDepartment) {
            if (!user.chatId) {
              continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç chatId
            }

            try {
              await bot.sendDocument(user.chatId, fileUrl, { caption: 'üìé –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞.' });
            } catch (error) {
            }
          }

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        delete adminState[username]; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

      } catch (error) {
      }
    } else {
      return bot.sendMessage(chatId, '‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-–¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF.');
    }
  }

    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞
if (text === 'üìÑ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã') {
  try {
    const user = await User.findOne({ username });

    if (!user || !user.department) {
      return bot.sendMessage(chatId, '‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
    }

    const docs = await Document.find({ department: user.department }).sort({ createdAt: -1 }).limit(10);

    if (docs.length === 0) {
      return bot.sendMessage(chatId, `üìÅ –í –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ "${user.department}" –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`);
    }

    // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    const inlineKeyboard = docs.map(doc => {
      return [
        {
          text: doc.fileName,
          url: doc.fileUrl, // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
        }
      ];
    });

    return bot.sendMessage(chatId, '–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞:', {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      }
    });

  } catch (error) {
    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
  // --- –§–æ—Ç–æ –æ–∂–∏–¥–∞–ª–æ—Å—å, –Ω–æ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–æ
  if (state?.step === 'awaitingPhotoUpload' && !msg.photo) {
    return bot.sendMessage(chatId, '‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
  }
});

bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const userId = msg.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (!adminIds.includes(userId)) {
    return bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.');
  }

  if (adminState[username]?.department) {
    const fileId = msg.document.file_id;
    const fileName = msg.document.file_name;
    const fileUrl = await bot.getFileLink(fileId);

    if (fileName.endsWith('.pdf')) {
      const department = adminState[username].department;

      try {
        const newDocument = new Document({
          department,
          fileName,
          fileUrl,
          uploadedBy: username,
          fileId: msg.document.file_id,  
        });

        await newDocument.save();

        const usersInDepartment = await User.find({ department });
        if (usersInDepartment.length === 0) {
          return bot.sendMessage(chatId, `‚ö†Ô∏è –í –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ ${department} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        for (const user of usersInDepartment) {
          if (!user.chatId) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ chatId
          }

          try {
            await bot.sendDocument(user.chatId, fileUrl, { caption: 'üìé –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞.' });
          } catch (error) {
        }
      }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        delete adminState[username]; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        return bot.sendMessage(chatId, `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–¥–µ–ª–∞ ${department}.`, adminMainMenu); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

      } catch (error) {
      }
    } else {
      return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.');
    }
  } else {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
  }
});

module.exports = { handleAdminCommands };
