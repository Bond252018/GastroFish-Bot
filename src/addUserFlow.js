const { isValidUsername, departmentList, User } = require('./utils');

async function handleAddUserFlow(bot, msg, stateStorage) {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const text = msg.text;
  const state = stateStorage[username];

  switch (state.step) {
    case 'awaitingUsername': {
      const usernameInput = text.trim().replace('@', '');
      if (!isValidUsername(text)) {
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @halyna_sichova).');
        return;
      }

      try {
        const existingUser = await User.findOne({ username: usernameInput });
        if (existingUser) {
          await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameInput} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
          return;
        }

        const newUser = new User({ username: usernameInput, department: '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ' });
        await newUser.save();

        stateStorage[username] = {
          step: 'awaitingDepartmentForNewUserByUsername',
          username: usernameInput
        };

        await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameInput} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          reply_markup: {
            keyboard: [...departmentList.map(d => [`${d.emoji} ${d.name}`]), ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
            resize_keyboard: true
          }
        });

        return;
      } catch (error) {
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
        return;
      }
    }

    case 'awaitingDepartmentForNewUserByUsername': {
      const dept = departmentList.find(d => `${d.emoji} ${d.name}` === text);
      if (!dept) {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
        return;
      }

      const userToUpdate = await User.findOne({ username: state.username });
      if (!userToUpdate) {
        await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${state.username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }

      userToUpdate.department = dept.name;
      await userToUpdate.save();

      delete stateStorage[username];

      await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userToUpdate.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ "${dept.name}".`);

      // –ù–ï –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é ‚Äî –ø—É—Å—Ç—å –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ —Å–∞–º —Ä–µ—à–∞–µ—Ç
      return { success: true };
    }
  }
}

module.exports = {
  handleAddUserFlow
};
