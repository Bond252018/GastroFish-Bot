const cron = require('node-cron');
const { bot, formatDateTimeRu, escapeMarkdownV2, escapeMarkdownV2Username, Task, User } = require('./utils'); 
const { adminIds } = require('../constants/constants');

console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω...');

cron.schedule('*/5 * * * *', async () => {
  const now = new Date();
  const hourLater = new Date(now.getTime() + 60 * 60 * 1000);

  try {
    const tasks = await Task.find({ isCompleted: false }); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

    for (let task of tasks) {
      const deadline = new Date(task.deadline);

      if (isNaN(deadline.getTime())) {
        continue;
      }

      const deadlineStr = formatDateTimeRu(deadline);

      // üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
      if (deadline > now && deadline <= hourLater && !task.notified) {
const reminderText = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ *${escapeMarkdownV2(task.title)}* –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ *${escapeMarkdownV2(deadlineStr)}*`;

        try {
          if (task.assignedTo) {
            // –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–æ–ª–∏)
            const user = await User.findOne({ username: task.assignedTo });
            if (user?.telegramId) {
              await bot.sendMessage(user.telegramId, reminderText, { parse_mode: 'MarkdownV2' });
            }
          } else {
            // –ù–∞–∑–Ω–∞—á–µ–Ω–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–ª–∏ —Å—É–±–∞–¥–º–∏–Ω–∞–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            const department = task.department;
            const users = await User.find({
              $or: [
                { department: department },           // –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
                { subadminDepartments: department }    // —Å—É–±–∞–¥–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
              ]
            });

            for (let user of users) {
              if (!user.telegramId) continue;
              await bot.sendMessage(user.telegramId, reminderText, { parse_mode: 'MarkdownV2' });
            }
          }

          task.notified = true;
          await task.save();
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${err.message}`);
        }
      }

      // ‚ùó –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      if (deadline < now && task.status !== 'overdue') {
        if (!task.assignedTo && task.department) {
          const completedBy = task.completedBy || {};
          const departmentUsers = await User.find({ department: task.department, role: 'user' });

          const notCompletedUsers = departmentUsers.filter(user => !completedBy[user.username]);

      const reportText = `üî∏ ${escapeMarkdownV2(task.title)}\n` +
  `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdownV2(task.description)}\n` +
  `üè¢ –û—Ç–¥–µ–ª: ${escapeMarkdownV2(task.department)}\n` +
  `üìÖ –î–µ–¥–ª–∞–π–Ω: ${escapeMarkdownV2(deadlineStr)}\n` +
  `üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: –≤—Å–µ–º –≤ –æ—Ç–¥–µ–ª–µ\n` +
  notCompletedUsers
  .map(user => `‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ${escapeMarkdownV2Username('@' + user.username)}`)
  .join('\n');


          // –ê–¥–º–∏–Ω–∞–º –∏ —Å—É–±–∞–¥–º–∏–Ω–∞–º
         if (task.createdByAdminId) {
          await bot.sendMessage(task.createdByAdminId, reportText, { parse_mode: 'MarkdownV2' });
        } else {
          // fallback ‚Äî –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º (—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
          for (let adminId of adminIds) {
            await bot.sendMessage(adminId, reportText, { parse_mode: 'MarkdownV2' });
          }
        }

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—É–±–∞–¥–º–∏–Ω–æ–≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
          const subadmins = await User.find({ subadminDepartments: task.department });
          for (let subadmin of subadmins) {
            if (subadmin.telegramId) {
              await bot.sendMessage(subadmin.telegramId, reportText, { parse_mode: 'MarkdownV2' });
            }
          }

          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
         for (const user of notCompletedUsers) {
          if (user.telegramId) {
            await bot.sendMessage(
              user.telegramId,
              `‚ùóÔ∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É "${escapeMarkdownV2(task.title)}" –≤–æ–≤—Ä–µ–º—è.`,
              { parse_mode: 'MarkdownV2' }
            );
          }
        }

          task.status = 'overdue';
          task.category = '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ';
          await task.save();
        } else if (task.assignedTo) {
          // –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –æ–¥–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
          const responsible = task.assignedTo ? '@' + task.assignedTo : '–≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞';

          for (let adminId of adminIds) {
        await bot.sendMessage(
          adminId,
            `‚ùå –ó–∞–¥–∞—á–∞ *"${escapeMarkdownV2(task.title)}"* \\(–æ—Ç–¥–µ–ª: ${escapeMarkdownV2(task.department)}\\) –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${escapeMarkdownV2Username(responsible)}\n\n–î–µ–¥–ª–∞–π–Ω –±—ã–ª: *${escapeMarkdownV2(deadlineStr)}*`,
            { parse_mode: 'MarkdownV2' }
          );
        }

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—É–±–∞–¥–º–∏–Ω–æ–≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
          const subadmins = await User.find({ subadminDepartments: task.department });
          for (let subadmin of subadmins) {
            if (subadmin.telegramId) {
              await bot.sendMessage(
                subadmin.telegramId,
                `‚ùå –ó–∞–¥–∞—á–∞ *"${escapeMarkdownV2(task.title)}"* \\(–æ—Ç–¥–µ–ª: ${escapeMarkdownV2(task.department)}\\) –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${escapeMarkdownV2Username(responsible)}\n\n–î–µ–¥–ª–∞–π–Ω –±—ã–ª: *${escapeMarkdownV2(deadlineStr)}*`,
                { parse_mode: 'MarkdownV2' }
              );
            }
          }

         const user = await User.findOne({ username: task.assignedTo });

          if (user?.telegramId) {
            await bot.sendMessage(
              user.telegramId,
              `‚ùóÔ∏è –ó–∞–¥–∞—á–∞ "${escapeMarkdownV2(task.title)}" –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è –∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ "–ú–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏".`,
              { parse_mode: 'MarkdownV2' }
            );
          }

          task.status = 'overdue';
          task.category = '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ';
          task.overdueNotified = true; // –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          await task.save();
        }
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
      if (deadline < now && now - deadline >= 30 * 24 * 60 * 60 * 1000) {
        await Task.deleteOne({ _id: task._id });
      }
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${err.message}`);
  }
});
