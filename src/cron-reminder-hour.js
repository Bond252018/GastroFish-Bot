const cron = require('node-cron');
const { bot, formatDateTimeRu, escapeMarkdownV2, escapeMarkdownV2Username, Task, User } = require('./utils'); 
const { adminIds } = require('../constants/constants');

console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω...');

cron.schedule('*/30 * * * *', async () => {
  const now = new Date();
  const hourLater = new Date(now.getTime() + 60 * 60 * 1000);

  try {
    const tasks = await Task.find({
      isCompleted: false,
      $or: [
        { status: { $ne: 'overdue' } },
        { overdueNotified: { $ne: true } }
      ]
    });

    for (let task of tasks) {
      const deadline = new Date(task.deadline);
      if (isNaN(deadline.getTime())) continue;

      const deadlineStr = formatDateTimeRu(deadline);
      const assignedUsername = Array.isArray(task.assignedTo) ? task.assignedTo[0] : task.assignedTo;

      // üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
      if (deadline > now && deadline <= hourLater && !task.notified) {
        const reminderText = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ *${escapeMarkdownV2(task.title)}* –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ *${escapeMarkdownV2(deadlineStr)}*`;

        try {
          if (assignedUsername) {
            const user = await User.findOne({ username: assignedUsername });
            if (user?.telegramId) {
              await bot.sendMessage(user.telegramId, reminderText, { parse_mode: 'MarkdownV2' });
            }
          } else {
            const users = await User.find({
              $or: [
                { department: task.department },
                { subadminDepartments: task.department }
              ]
            });

            for (let user of users) {
              if (user.telegramId) {
                await bot.sendMessage(user.telegramId, reminderText, { parse_mode: 'MarkdownV2' });
              }
            }
          }

          task.notified = true;
          await task.save();
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${err.message}`);
        }
      }

      // ‚ùó –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      if (deadline < now && task.status !== 'overdue') {
        const completedBy = task.completedBy || {};

        if (!assignedUsername && task.department) {
          const departmentUsers = await User.find({ department: task.department, role: 'user' });
          const notCompletedUsers = departmentUsers.filter(user => !completedBy[user.username]);

          const reportText = `üî∏ ${escapeMarkdownV2(task.title)}\n` +
            `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdownV2(task.description)}\n` +
            `üè¢ –û—Ç–¥–µ–ª: ${escapeMarkdownV2(task.department)}\n` +
            `üìÖ –î–µ–¥–ª–∞–π–Ω: ${escapeMarkdownV2(deadlineStr)}\n` +
            `üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: –≤—Å–µ–º –≤ –æ—Ç–¥–µ–ª–µ\n` +
            notCompletedUsers.map(user => `‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ${escapeMarkdownV2Username('@' + user.username)}`).join('\n');

          for (let adminId of adminIds) {
            try {
              await bot.sendMessage(adminId, reportText, { parse_mode: 'MarkdownV2' });
            } catch (e) {
              console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}: ${e.message}`);
            }
          }

          const subadmins = await User.find({ subadminDepartments: task.department });
          for (let subadmin of subadmins) {
            if (subadmin.telegramId) {
              try {
                await bot.sendMessage(subadmin.telegramId, reportText, { parse_mode: 'MarkdownV2' });
              } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ —Å–∞–±–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @${subadmin.username}: ${e.message}`);
              }
            }
          }

          for (const user of notCompletedUsers) {
            if (user.telegramId) {
              try {
                const userMsg = escapeMarkdownV2(`‚ùóÔ∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É "${task.title}" –≤–æ–≤—Ä–µ–º—è.`);
                await bot.sendMessage(user.telegramId, userMsg, { parse_mode: 'MarkdownV2' });
              } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${user.username}: ${e.message}`);
              }
            }
          }

          task.status = 'overdue';
          task.category = '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ';
          task.overdueNotified = true;
          await task.save();
        } else if (assignedUsername) {
          const responsible = `@${assignedUsername}`;
          let departmentDisplay = '';

          if (task.department) {
            departmentDisplay = escapeMarkdownV2(task.department);
          } else if (assignedUsername) {
            const assignedUser = await User.findOne({ username: assignedUsername });

            if (assignedUser) {
              if (assignedUser.subadminDepartments && assignedUser.subadminDepartments.length > 0) {
                departmentDisplay = '–°—É–±–∞–¥–º–∏–Ω';
              } else if (assignedUser.role === 'admin') {
                departmentDisplay = '–ê–¥–º–∏–Ω';
              } else {
                departmentDisplay = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
              }
            } else {
              departmentDisplay = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            }
          }

          const overdueText = `‚ùå –ó–∞–¥–∞—á–∞ *"${escapeMarkdownV2(task.title)}"* \\(–æ—Ç–¥–µ–ª: ${departmentDisplay}\\) –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${escapeMarkdownV2Username(responsible)}\n\n–î–µ–¥–ª–∞–π–Ω –±—ã–ª: *${escapeMarkdownV2(deadlineStr)}*`;

          for (let adminId of adminIds) {
            try {
              await bot.sendMessage(adminId, overdueText, { parse_mode: 'MarkdownV2' });
            } catch (e) {
              console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}: ${e.message}`);
            }
          }

          const subadmins = await User.find({ subadminDepartments: task.department });
          for (let subadmin of subadmins) {
            if (subadmin.telegramId) {
              try {
                await bot.sendMessage(subadmin.telegramId, overdueText, { parse_mode: 'MarkdownV2' });
              } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–±–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @${subadmin.username}: ${e.message}`);
              }
            }
          }

          const user = await User.findOne({ username: assignedUsername });
          if (user?.telegramId) {
            try {
            const userMsg = `‚ùóÔ∏è –ó–∞–¥–∞—á–∞ *${escapeMarkdownV2(task.title)}* –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è –∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ \\\"–ú–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\\\"\\.`;
              await bot.sendMessage(user.telegramId, userMsg, { parse_mode: 'MarkdownV2' });
            } catch (e) {
              console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${assignedUsername}: ${e.message}`);
            }
          }

          task.status = 'overdue';
          task.category = '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ';
          task.overdueNotified = true;
          await task.save();
        }
      }

      // üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
      if (deadline < now && now - deadline >= 30 * 24 * 60 * 60 * 1000) {
        await Task.deleteOne({ _id: task._id });
      }
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${err.message}`);
  }
});
